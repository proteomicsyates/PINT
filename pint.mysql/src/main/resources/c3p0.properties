# Milliseconds, time c3p0 will wait between acquire attempts.
c3p0.acquireRetryDelay=4000

# Defines how many times c3p0 will try to acquire a new Connection from the database 
# before giving up. If this value is less than or equal to zero, c3p0 will keep trying
# to fetch a Connection indefinitely.
c3p0.acquireRetryAttempts=60

# if true, a pooled DataSource will declare itself broken and be permanently closed if
# a Connection cannot be obtained from the database after making acquireRetryAttempts
# to acquire one. If false, failure to obtain a Connection will cause all Threads 
# waiting for the pool to acquire a Connection to throw an Exception, but the 
# DataSource will remain valid, and will attempt to acquire again following a call to
# getConnection().
c3p0.breakAfterAcquireFailure=false

# The number of milliseconds a client calling getConnection() will wait for a 
# Connection to be checked-in or acquired when the pool is exhausted. Zero means wait 
# indefinitely. Setting any positive value will cause the getConnection() call to 
# time-out and break with an SQLException after the specified number of milliseconds. 
c3p0.checkoutTimeout=10000

c3p0.preferredTestQuery=SELECT 1
c3p0.testConnectionOnCheckout=true

# Maximum number of Connections a pool will maintain at any given time.
c3p0.maxPoolSize=500

# Minimum number of Connections a pool will maintain at any given time.
c3p0.minPoolSize=5


# The number of PreparedStatements c3p0 will cache for a single pooled Connection.
c3p0.maxStatementsPerConnection=200

# The size of c3p0's global PreparedStatement cache. If both maxStatements and maxStatementsPerConnection are zero, 
# statement caching will not be enabled. If maxStatements is zero but maxStatementsPerConnection is a non-zero value,
# statement caching will be enabled, but no global limit will be enforced, only the per-connection maximum. 
# maxStatements controls the total number of Statements cached, for all Connections. 
# If set, it should be a fairly large number, as each pooled Connection requires its own, distinct flock of cached statements. 
# As a guide, consider how many distinct PreparedStatements are used frequently in your application, and multiply that number by maxPoolSize
# to arrive at an appropriate value. Though maxStatements is the JDBC standard parameter for controlling statement caching, 
# users may find c3p0's alternative maxStatementsPerConnection more intuitive to use.
c3p0.maxStatements=0

# If true, and if unreturnedConnectionTimeout is set to a positive value, then the pool will capture the 
# stack trace (via an Exception) of all Connection checkouts, and the stack traces will be printed when
# unreturned checked-out Connections timeout. This is intended to debug applications with Connection leaks.
c3p0.debugUnreturnedConnectionStackTraces=true

# Seconds. If set, if an application checks out but then fails to check-in [i.e. close()] a 
# Connection within the specified period of time, the pool will unceremoniously destroy() the Connection.
# This permits applications with occasional Connection leaks to survive, rather than eventually exhausting
# the Connection pool. And that's a shame. Zero means no timeout, applications are expected to close() their own Connections. 
# Obviously, if a non-zero value is set, it should be to a value longer than any Connection should reasonably be checked-out. 
# Otherwise, the pool will occasionally kill Connections in active use, which is bad.
c3p0.unreturnedConnectionTimeout=12000 


# Commented as defined in hibernate.cfg.xml
# Seconds a Connection can remain pooled but unused before being discarded. Zero means idle connections never expire.
c3p0.maxIdleTime=12000


#c3p0 is very asynchronous. Slow JDBC operations are generally performed by helper threads that don't hold contended locks.
#Spreading these operations over multiple threads can significantly improve performance by allowing multiple operations
#to be performed simultaneously. 
c3p0.numHelperThreads=50