//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, vhudson-jaxb-ri-2.2-7
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2014.12.03 at 06:58:04 PM PST
//

package edu.scripps.yates.shared.model.projectCreator.excel;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class RemoteInfoTypeBean implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5547455262733483117L;
	protected List<String> fileRefs;
	protected String discardDecoys;
	protected String msRunRef;

	/**
	 * Gets the value of the fileRef property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the fileRef property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getFileRef().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link FileReferenceTypeBean }
	 * 
	 * 
	 */
	public List<String> getFileRefs() {
		if (fileRefs == null) {
			fileRefs = new ArrayList<String>();
		}
		return fileRefs;
	}

	/**
	 * Gets the value of the discardDecoys property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getDiscardDecoys() {
		return discardDecoys;
	}

	/**
	 * Sets the value of the discardDecoys property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setDiscardDecoys(String value) {
		discardDecoys = value;
	}

	/**
	 * Gets the value of the msRunRef property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getMsRunRef() {
		return msRunRef;
	}

	/**
	 * Sets the value of the msRunRef property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setMsRunRef(String value) {
		msRunRef = value;
	}

	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof RemoteInfoTypeBean) {
			RemoteInfoTypeBean remoteInfoTypeBean = (RemoteInfoTypeBean) obj;
			if ((remoteInfoTypeBean.getDiscardDecoys() != null
					&& getDiscardDecoys() != null && remoteInfoTypeBean
					.getDiscardDecoys().equals(getDiscardDecoys()))
					|| (remoteInfoTypeBean.getDiscardDecoys() == null && getDiscardDecoys() == null)) {
				if ((remoteInfoTypeBean.getMsRunRef() != null
						&& getMsRunRef() != null && remoteInfoTypeBean
						.getMsRunRef().equals(getMsRunRef()))
						|| (remoteInfoTypeBean.getMsRunRef() == null && getMsRunRef() == null)) {
					if ((remoteInfoTypeBean.getFileRefs() != null
							&& getFileRefs() != null && remoteInfoTypeBean
							.getFileRefs().size() == getFileRefs().size())
							|| (remoteInfoTypeBean.getFileRefs() == null && getFileRefs() == null)) {
						if (getFileRefs() != null) {
							for (String fileref : getFileRefs()) {
								if (!remoteInfoTypeBean.getFileRefs().contains(
										fileref))
									return false;
							}
						}
						return true;
					}
				}
			}
			return false;
		}
		return super.equals(obj);
	}

}
